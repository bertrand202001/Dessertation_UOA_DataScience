import pandas as pd
import glob
import sklearn.utils as su
import sklearn.ensemble as se
import sklearn.metrics as sm
import matplotlib.pyplot as mp
import numpy as np
import sklearn.tree as st

path = '/Users/yujzhang/Downloads/backup/auckland_rugby_2018_game_data/game_data' # use your path
all_files = glob.glob(path + "/*.csv")

path_position = '/Users/yujzhang/Downloads/backup/auckland_rugby_2018_game_data/game_data/Player_Profiles_2019'
files = glob.glob(path_position + "/position.csv")

li = []

for filename in all_files:
    df = pd.read_csv(filename, index_col=None, header=0)
    li.append(df)

frame = pd.concat(li, axis=0, ignore_index=True)


for file in files:
    df = pd.read_csv(file, index_col=None, header=0)

df['Athlete'] = df[['last', 'first']].apply(lambda x: ', '.join(x), axis=1)

df_position = pd.DataFrame(columns=['Athlete','Position','Rank'])
df_position['Athlete'] = df['Athlete']
df_position['Position'] = df['Position ']
df_position['Rank'] = 100 - 10*df['Rank']

merged_data2 = pd.merge(left=frame,right=df_position, how='left', left_on='Athlete', right_on='Athlete')


clean_data = merged_data2[-merged_data2['Position'].isna()]


positions = ['Loose Head','Tight Head','Hooker','Lock','Blindside Flanker','Openside Flanker',
             'Number 8','Scrum Half','Fly Half','Inside Centre','Outside Centre',
             'Winger','Full Back','Winger']

for position in positions:
    
    group_data = clean_data[clean_data['Position'] == position]   
    
    
    tr = pd.DataFrame(columns=['Athlete','Rank'])
    
    tr['Athlete'] = group_data['Athlete']
    tr['Rank'] = group_data['Rank']
    
    merged_data1 = pd.merge(left=group_data,right=tr, how='left', left_on='Athlete', right_on='Athlete')
    
    
    index = [7,8,9,11,12,13,15,20,21,22,23,24,25,26]
    
    fn_dy = merged_data1.columns[index]
    x = merged_data1.iloc[:,index]
    y = merged_data1['Rank']
    
    su.shuffle(x, y, random_state=7)
    
    
    train_size = int(len(x) * 0.9)
    train_x, test_x, train_y, test_y = x[:train_size], x[train_size:], y[:train_size], y[train_size:]
    
    #RandomForestRegressor
    model = se.RandomForestRegressor(max_depth=10, n_estimators=1000, min_samples_split=2)
    model.fit(train_x, train_y)
    
    
    #feature importance
    fi_dy = model.feature_importances_
    
    
    #Test if the model is fitting well
    pred_test_y = model.predict(test_x)
    print("The r2 score of RandomForestRegresson is :")
    print(sm.r2_score(test_y, pred_test_y))
    
    
    #DecisionTreeRegressor                                 
    model2 = st.DecisionTreeRegressor(max_depth=4)
    #Train
    model2.fit(train_x,train_y)
    fi_dt = model2.feature_importances_
    #Predict
    pred_test_y2 = model2.predict(test_x)
    print("The r2 score of DecisionTreeRegression is :") 
    print(sm.r2_score(test_y, pred_test_y2)) 
    
    
    #AdaBoostRegressor
    model3 = se.AdaBoostRegressor(
            st.DecisionTreeRegressor(max_depth=4),
            n_estimators=400,random_state=7)
    model3.fit(train_x,train_y)
    fi_ab = model3.feature_importances_
    pred_test_y3 = model3.predict(test_x)
    print("The r2 score of AdaBoostRegression is :")
    print(sm.r2_score(test_y, pred_test_y3))     
    
    mp.figure('Feature Importance', figsize=(18, 12.5))
    mp.subplot(131)
    mp.title('Random Forest', fontsize=16)
    mp.ylabel('Importance', fontsize=12)
    mp.tick_params(labelsize=10)
    mp.grid(axis='y', linestyle=':')
    sorted_indices = fi_dy.argsort()[::-1]
    pos = np.arange(sorted_indices.size)
    mp.bar(pos, fi_dy[sorted_indices], facecolor='deepskyblue', edgecolor='steelblue')
    mp.xticks(pos, fn_dy[sorted_indices],
              rotation=90)
    mp.tight_layout()
    
    mp.subplot(132)
    mp.title('Decision Tree', fontsize=16)
    mp.ylabel('Importance', fontsize=12)
    mp.tick_params(labelsize=10)
    mp.grid(axis='y', linestyle=':')
    sorted_indices = fi_dt.argsort()[::-1]
    pos = np.arange(sorted_indices.size)
    mp.bar(pos, fi_dt[sorted_indices], facecolor='deepskyblue', edgecolor='steelblue')
    mp.xticks(pos, fn_dy[sorted_indices],
          rotation=90)
    mp.tight_layout()
    
    
    mp.subplot(133)
    mp.title('AdaBoost Decision Tree', fontsize=16)
    mp.ylabel('Importance', fontsize=12)
    mp.tick_params(labelsize=10)
    mp.grid(axis='y', linestyle=':')
    sorted_indices = fi_ab.argsort()[::-1]
    pos = np.arange(sorted_indices.size)
    mp.bar(pos, fi_ab[sorted_indices], facecolor='indianred', edgecolor='indianred')
    mp.xticks(pos, fn_dy[sorted_indices],
              rotation=90)
    mp.tight_layout()
    
    mp.savefig('/Users/yujzhang/Downloads/backup/plot'+position+'.png', format='png')
    mp.close()
